// Code generated by go generate; DO NOT EDIT.
// This file was generated on 2023-05-17 16:28:52
// using data from https://www.alphavantage.co/documentation

package alphavantage

import "github.com/jay9909/alphavantage/api"

// Endpoint Category: Foreign Exchange (FX)
// https://www.alphavantage.co/documentation/#fx
//
// APIs under this section provide a wide range of data feed for realtime and historical forex (FX) rates.

// CURRENCY_EXCHANGE_RATE
// This API returns the realtime exchange rate for a pair of digital currency (e.g., Bitcoin) and physical currency (e.g., USD).
// https://www.alphavantage.co/documentation/#currency-exchange
//
// Parameters:
// -	from_currency: The currency you would like to get the exchange rate for. It can either be a <a href="https://www.alphavantage.co/physical_currency_list/" target="_blank"> physical currency</a> or <a href="https://www.alphavantage.co/digital_currency_list/" target="_blank"> digital/crypto currency</a>. For example: <code>from_currency=USD</code> or <code>from_currency=BTC</code>.
// -	to_currency: The destination currency for the exchange rate. It can either be a <a href="https://www.alphavantage.co/physical_currency_list/" target="_blank"> physical currency</a> or <a href="https://www.alphavantage.co/digital_currency_list/" target="_blank"> digital/crypto currency</a>. For example: <code>to_currency=USD</code> or <code>to_currency=BTC</code>.
func (a *Alphavantage) GetCurrencyExchangeRate(from_currency, to_currency string) api.Response {
	function := "CURRENCY_EXCHANGE_RATE"
	params := map[string]string{
		"from_currency": from_currency,
		"to_currency":   to_currency,
	}

	return a.client.Query(function, params)
}

// [PREMIUM] FX_INTRADAY
// This API returns intraday time series (timestamp, open, high, low, close) of the FX currency pair specified, updated realtime.
// https://www.alphavantage.co/documentation/#fx-intraday
//
// Parameters:
// -	from_symbol: A three-letter symbol from the <a href="https://www.alphavantage.co/physical_currency_list/" target="_blank"> forex currency list</a>. For example: <code>from_symbol=EUR</code>
// -	to_symbol: A three-letter symbol from the <a href="https://www.alphavantage.co/physical_currency_list/" target="_blank"> forex currency list</a>. For example: <code>to_symbol=USD</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>
// -	opt_outputsize: By default, <code>outputsize=compact</code>. Strings <code>compact</code> and <code>full</code> are accepted with the following specifications: <code>compact</code> returns only the latest 100 data points in the intraday time series; <code>full</code> returns the full-length intraday time series. The &#34;compact&#34; option is recommended if you would like to reduce the data size of each API call.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the intraday time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetFxIntraday(from_symbol, to_symbol, interval, opt_outputsize, opt_datatype string) api.Response {
	function := "FX_INTRADAY"
	params := map[string]string{
		"from_symbol": from_symbol,
		"to_symbol":   to_symbol,
		"interval":    interval,
		"outputsize":  opt_outputsize,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// FX_DAILY
// This API returns the daily time series (timestamp, open, high, low, close) of the FX currency pair specified, updated realtime.
// https://www.alphavantage.co/documentation/#fx-daily
//
// Parameters:
// -	from_symbol: A three-letter symbol from the <a href="https://www.alphavantage.co/physical_currency_list/" target="_blank"> forex currency list</a>. For example: <code>from_symbol=EUR</code>
// -	to_symbol: A three-letter symbol from the <a href="https://www.alphavantage.co/physical_currency_list/" target="_blank"> forex currency list</a>. For example: <code>to_symbol=USD</code>
// -	opt_outputsize: By default, <code>outputsize=compact</code>. Strings <code>compact</code> and <code>full</code> are accepted with the following specifications: <code>compact</code> returns only the latest 100 data points in the daily time series; <code>full</code> returns the full-length daily time series. The &#34;compact&#34; option is recommended if you would like to reduce the data size of each API call.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetFxDaily(from_symbol, to_symbol, opt_outputsize, opt_datatype string) api.Response {
	function := "FX_DAILY"
	params := map[string]string{
		"from_symbol": from_symbol,
		"to_symbol":   to_symbol,
		"outputsize":  opt_outputsize,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// FX_WEEKLY
// This API returns the weekly time series (timestamp, open, high, low, close) of the FX currency pair specified, updated realtime.
// The latest data point is the price information for the week (or partial week) containing the current trading day, updated realtime.
// https://www.alphavantage.co/documentation/#fx-weekly
//
// Parameters:
// -	from_symbol: A three-letter symbol from the <a href="https://www.alphavantage.co/physical_currency_list/" target="_blank"> forex currency list</a>. For example: <code>from_symbol=EUR</code>
// -	to_symbol: A three-letter symbol from the <a href="https://www.alphavantage.co/physical_currency_list/" target="_blank"> forex currency list</a>. For example: <code>to_symbol=USD</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the weekly time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetFxWeekly(from_symbol, to_symbol, opt_datatype string) api.Response {
	function := "FX_WEEKLY"
	params := map[string]string{
		"from_symbol": from_symbol,
		"to_symbol":   to_symbol,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// FX_MONTHLY
// This API returns the monthly time series (timestamp, open, high, low, close) of the FX currency pair specified, updated realtime.
// The latest data point is the prices information for the month (or partial month) containing the current trading day, updated realtime.
// https://www.alphavantage.co/documentation/#fx-monthly
//
// Parameters:
// -	from_symbol: A three-letter symbol from the <a href="https://www.alphavantage.co/physical_currency_list/" target="_blank"> forex currency list</a>. For example: <code>from_symbol=EUR</code>
// -	to_symbol: A three-letter symbol from the <a href="https://www.alphavantage.co/physical_currency_list/" target="_blank"> forex currency list</a>. For example: <code>to_symbol=USD</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the monthly time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetFxMonthly(from_symbol, to_symbol, opt_datatype string) api.Response {
	function := "FX_MONTHLY"
	params := map[string]string{
		"from_symbol": from_symbol,
		"to_symbol":   to_symbol,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// Endpoint Category: Digital & Crypto Currencies
// https://www.alphavantage.co/documentation/#digital-currency
//
// APIs under this section provide a wide range of data feed for digital and crypto currencies such as Bitcoin.

// [PREMIUM] CRYPTO_INTRADAY
// This API returns intraday time series (timestamp, open, high, low, close, volume) of the cryptocurrency specified, updated realtime.
// https://www.alphavantage.co/documentation/#crypto-intraday
//
// Parameters:
// -	symbol: The digital/crypto currency of your choice. It can be any of the currencies in the <a href="https://www.alphavantage.co/digital_currency_list/" target="_blank"> digital currency list</a>. For example: <code>symbol=ETH</code>.
// -	market: The exchange market of your choice. It can be any of the market in the <a href="https://www.alphavantage.co/physical_currency_list/" target="_blank"> market list</a>. For example: <code>market=USD</code>.
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>
// -	opt_outputsize: By default, <code>outputsize=compact</code>. Strings <code>compact</code> and <code>full</code> are accepted with the following specifications: <code>compact</code> returns only the latest 100 data points in the intraday time series; <code>full</code> returns the full-length intraday time series. The &#34;compact&#34; option is recommended if you would like to reduce the data size of each API call.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the intraday time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetCryptoIntraday(symbol, market, interval, opt_outputsize, opt_datatype string) api.Response {
	function := "CRYPTO_INTRADAY"
	params := map[string]string{
		"symbol":     symbol,
		"market":     market,
		"interval":   interval,
		"outputsize": opt_outputsize,
		"datatype":   opt_datatype,
	}

	return a.client.Query(function, params)
}

// DIGITAL_CURRENCY_DAILY
// This API returns the daily historical time series for a digital currency (e.g., BTC) traded on a specific market (e.g., CNY/Chinese Yuan), refreshed daily at midnight (UTC). Prices and volumes are quoted in both the market-specific currency and USD.
// https://www.alphavantage.co/documentation/#currency-daily
//
// Parameters:
// -	symbol: The digital/crypto currency of your choice. It can be any of the currencies in the <a href="https://www.alphavantage.co/digital_currency_list/" target="_blank"> digital currency list</a>. For example: <code>symbol=BTC</code>.
// -	market: The exchange market of your choice. It can be any of the market in the <a href="https://www.alphavantage.co/physical_currency_list/" target="_blank"> market list</a>. For example: <code>market=CNY</code>.
func (a *Alphavantage) GetDigitalCurrencyDaily(symbol, market string) api.Response {
	function := "DIGITAL_CURRENCY_DAILY"
	params := map[string]string{
		"symbol": symbol,
		"market": market,
	}

	return a.client.Query(function, params)
}

// DIGITAL_CURRENCY_WEEKLY
// This API returns the weekly historical time series for a digital currency (e.g., BTC) traded on a specific market (e.g., CNY/Chinese Yuan), refreshed daily at midnight (UTC). Prices and volumes are quoted in both the market-specific currency and USD.
// https://www.alphavantage.co/documentation/#currency-weekly
//
// Parameters:
// -	symbol: The digital/crypto currency of your choice. It can be any of the currencies in the <a href="https://www.alphavantage.co/digital_currency_list/" target="_blank"> digital currency list</a>. For example: <code>symbol=BTC</code>.
// -	market: The exchange market of your choice. It can be any of the market in the <a href="https://www.alphavantage.co/physical_currency_list/" target="_blank"> market list</a>. For example: <code>market=CNY</code>.
func (a *Alphavantage) GetDigitalCurrencyWeekly(symbol, market string) api.Response {
	function := "DIGITAL_CURRENCY_WEEKLY"
	params := map[string]string{
		"symbol": symbol,
		"market": market,
	}

	return a.client.Query(function, params)
}

// DIGITAL_CURRENCY_MONTHLY
// This API returns the monthly historical time series for a digital currency (e.g., BTC) traded on a specific market (e.g., CNY/Chinese Yuan), refreshed daily at midnight (UTC). Prices and volumes are quoted in both the market-specific currency and USD.
// https://www.alphavantage.co/documentation/#currency-monthly
//
// Parameters:
// -	symbol: The digital/crypto currency of your choice. It can be any of the currencies in the <a href="https://www.alphavantage.co/digital_currency_list/" target="_blank"> digital currency list</a>. For example: <code>symbol=BTC</code>.
// -	market: The exchange market of your choice. It can be any of the market in the <a href="https://www.alphavantage.co/physical_currency_list/" target="_blank"> market list</a>. For example: <code>market=CNY</code>.
func (a *Alphavantage) GetDigitalCurrencyMonthly(symbol, market string) api.Response {
	function := "DIGITAL_CURRENCY_MONTHLY"
	params := map[string]string{
		"symbol": symbol,
		"market": market,
	}

	return a.client.Query(function, params)
}

// Endpoint Category: Commodities
// https://www.alphavantage.co/documentation/#commodities
//
// APIs under this section provide historical data for major commodities such as crude oil, natural gas, copper, wheat, etc., spanning across various temporal horizons (daily, weekly, monthly, quarterly, etc.)

// Crude Oil Prices: West Texas Intermediate (WTI)
// This API returns the West Texas Intermediate (WTI) crude oil prices in daily, weekly, and monthly horizons.
// Source: U.S. Energy Information Administration, Crude Oil Prices: West Texas Intermediate (WTI) - Cushing, Oklahoma, retrieved from FRED, Federal Reserve Bank of St. Louis. This data feed uses the FRED® API but is <u>not</u> endorsed or certified by the Federal Reserve Bank of St. Louis. By using this data feed, you agree to be bound by the <a href="https://fred.stlouisfed.org/docs/api/terms_of_use.html" target="_blank">FRED® API Terms of Use</a>.
// https://www.alphavantage.co/documentation/#wti
//
// Parameters:
// -	opt_interval: By default, <code>interval=monthly</code>. Strings <code>daily</code>, <code>weekly</code>, and <code>monthly</code> are accepted.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetWti(opt_interval, opt_datatype string) api.Response {
	function := "WTI"
	params := map[string]string{
		"interval": opt_interval,
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// Crude Oil Prices (Brent)
// This API returns the Brent (Europe) crude oil prices in daily, weekly, and monthly horizons.
// Source: U.S. Energy Information Administration, Crude Oil Prices: Brent - Europe, retrieved from FRED, Federal Reserve Bank of St. Louis. This data feed uses the FRED® API but is <u>not</u> endorsed or certified by the Federal Reserve Bank of St. Louis. By using this data feed, you agree to be bound by the <a href="https://fred.stlouisfed.org/docs/api/terms_of_use.html" target="_blank">FRED® API Terms of Use</a>.
// https://www.alphavantage.co/documentation/#brent
//
// Parameters:
// -	opt_interval: By default, <code>interval=monthly</code>. Strings <code>daily</code>, <code>weekly</code>, and <code>monthly</code> are accepted.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetBrent(opt_interval, opt_datatype string) api.Response {
	function := "BRENT"
	params := map[string]string{
		"interval": opt_interval,
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// Natural Gas
// This API returns the Henry Hub natural gas spot prices in daily, weekly, and monthly horizons.
// Source: U.S. Energy Information Administration, Henry Hub Natural Gas Spot Price, retrieved from FRED, Federal Reserve Bank of St. Louis. This data feed uses the FRED® API but is <u>not</u> endorsed or certified by the Federal Reserve Bank of St. Louis. By using this data feed, you agree to be bound by the <a href="https://fred.stlouisfed.org/docs/api/terms_of_use.html" target="_blank">FRED® API Terms of Use</a>.
// https://www.alphavantage.co/documentation/#natural-gas
//
// Parameters:
// -	opt_interval: By default, <code>interval=monthly</code>. Strings <code>daily</code>, <code>weekly</code>, and <code>monthly</code> are accepted.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetNaturalGas(opt_interval, opt_datatype string) api.Response {
	function := "NATURAL_GAS"
	params := map[string]string{
		"interval": opt_interval,
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// Global Price of Copper
// This API returns the global price of copper in monthly, quarterly, and annual horizons.
// Source: International Monetary Fund (<a href="https://www.imf.org/external/terms.htm" target="_blank">IMF Terms of Use</a>), Global price of Copper, retrieved from FRED, Federal Reserve Bank of St. Louis. This data feed uses the FRED® API but is <u>not</u> endorsed or certified by the Federal Reserve Bank of St. Louis. By using this data feed, you agree to be bound by the <a href="https://fred.stlouisfed.org/docs/api/terms_of_use.html" target="_blank">FRED® API Terms of Use</a>.
// https://www.alphavantage.co/documentation/#copper
//
// Parameters:
// -	opt_interval: By default, <code>interval=monthly</code>. Strings <code>monthly</code>, <code>quarterly</code>, and <code>annual</code> are accepted.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetCopper(opt_interval, opt_datatype string) api.Response {
	function := "COPPER"
	params := map[string]string{
		"interval": opt_interval,
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// Global Price of Aluminum
// This API returns the global price of aluminum in monthly, quarterly, and annual horizons.
// Source: International Monetary Fund (<a href="https://www.imf.org/external/terms.htm" target="_blank">IMF Terms of Use</a>), Global price of Aluminum, retrieved from FRED, Federal Reserve Bank of St. Louis. This data feed uses the FRED® API but is <u>not</u> endorsed or certified by the Federal Reserve Bank of St. Louis. By using this data feed, you agree to be bound by the <a href="https://fred.stlouisfed.org/docs/api/terms_of_use.html" target="_blank">FRED® API Terms of Use</a>.
// https://www.alphavantage.co/documentation/#aluminum
//
// Parameters:
// -	opt_interval: By default, <code>interval=monthly</code>. Strings <code>monthly</code>, <code>quarterly</code>, and <code>annual</code> are accepted.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetAluminum(opt_interval, opt_datatype string) api.Response {
	function := "ALUMINUM"
	params := map[string]string{
		"interval": opt_interval,
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// Global Price of Wheat
// This API returns the global price of wheat in monthly, quarterly, and annual horizons.
// Source: International Monetary Fund (<a href="https://www.imf.org/external/terms.htm" target="_blank">IMF Terms of Use</a>), Global price of Wheat, retrieved from FRED, Federal Reserve Bank of St. Louis. This data feed uses the FRED® API but is <u>not</u> endorsed or certified by the Federal Reserve Bank of St. Louis. By using this data feed, you agree to be bound by the <a href="https://fred.stlouisfed.org/docs/api/terms_of_use.html" target="_blank">FRED® API Terms of Use</a>.
// https://www.alphavantage.co/documentation/#wheat
//
// Parameters:
// -	opt_interval: By default, <code>interval=monthly</code>. Strings <code>monthly</code>, <code>quarterly</code>, and <code>annual</code> are accepted.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetWheat(opt_interval, opt_datatype string) api.Response {
	function := "WHEAT"
	params := map[string]string{
		"interval": opt_interval,
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// Global Price of Corn
// This API returns the global price of corn in monthly, quarterly, and annual horizons.
// Source: International Monetary Fund (<a href="https://www.imf.org/external/terms.htm" target="_blank">IMF Terms of Use</a>), Global price of Corn, retrieved from FRED, Federal Reserve Bank of St. Louis. This data feed uses the FRED® API but is <u>not</u> endorsed or certified by the Federal Reserve Bank of St. Louis. By using this data feed, you agree to be bound by the <a href="https://fred.stlouisfed.org/docs/api/terms_of_use.html" target="_blank">FRED® API Terms of Use</a>.
// https://www.alphavantage.co/documentation/#corn
//
// Parameters:
// -	opt_interval: By default, <code>interval=monthly</code>. Strings <code>monthly</code>, <code>quarterly</code>, and <code>annual</code> are accepted.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetCorn(opt_interval, opt_datatype string) api.Response {
	function := "CORN"
	params := map[string]string{
		"interval": opt_interval,
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// Global Price of Cotton
// This API returns the global price of cotton in monthly, quarterly, and annual horizons.
// Source: International Monetary Fund (<a href="https://www.imf.org/external/terms.htm" target="_blank">IMF Terms of Use</a>), Global price of Cotton, retrieved from FRED, Federal Reserve Bank of St. Louis. This data feed uses the FRED® API but is <u>not</u> endorsed or certified by the Federal Reserve Bank of St. Louis. By using this data feed, you agree to be bound by the <a href="https://fred.stlouisfed.org/docs/api/terms_of_use.html" target="_blank">FRED® API Terms of Use</a>.
// https://www.alphavantage.co/documentation/#cotton
//
// Parameters:
// -	opt_interval: By default, <code>interval=monthly</code>. Strings <code>monthly</code>, <code>quarterly</code>, and <code>annual</code> are accepted.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetCotton(opt_interval, opt_datatype string) api.Response {
	function := "COTTON"
	params := map[string]string{
		"interval": opt_interval,
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// Global Price of Sugar
// This API returns the global price of sugar in monthly, quarterly, and annual horizons.
// Source: International Monetary Fund (<a href="https://www.imf.org/external/terms.htm" target="_blank">IMF Terms of Use</a>), Global price of Sugar, No. 11, World, retrieved from FRED, Federal Reserve Bank of St. Louis. This data feed uses the FRED® API but is <u>not</u> endorsed or certified by the Federal Reserve Bank of St. Louis. By using this data feed, you agree to be bound by the <a href="https://fred.stlouisfed.org/docs/api/terms_of_use.html" target="_blank">FRED® API Terms of Use</a>.
// https://www.alphavantage.co/documentation/#sugar
//
// Parameters:
// -	opt_interval: By default, <code>interval=monthly</code>. Strings <code>monthly</code>, <code>quarterly</code>, and <code>annual</code> are accepted.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetSugar(opt_interval, opt_datatype string) api.Response {
	function := "SUGAR"
	params := map[string]string{
		"interval": opt_interval,
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// Global Price of Coffee
// This API returns the global price of coffee in monthly, quarterly, and annual horizons.
// Source: International Monetary Fund (<a href="https://www.imf.org/external/terms.htm" target="_blank">IMF Terms of Use</a>), Global price of Coffee, Other Mild Arabica, retrieved from FRED, Federal Reserve Bank of St. Louis. This data feed uses the FRED® API but is <u>not</u> endorsed or certified by the Federal Reserve Bank of St. Louis. By using this data feed, you agree to be bound by the <a href="https://fred.stlouisfed.org/docs/api/terms_of_use.html" target="_blank">FRED® API Terms of Use</a>.
// https://www.alphavantage.co/documentation/#coffee
//
// Parameters:
// -	opt_interval: By default, <code>interval=monthly</code>. Strings <code>monthly</code>, <code>quarterly</code>, and <code>annual</code> are accepted.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetCoffee(opt_interval, opt_datatype string) api.Response {
	function := "COFFEE"
	params := map[string]string{
		"interval": opt_interval,
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// Global Price Index of All Commodities
// This API returns the global price index of all commodities in monthly, quarterly, and annual temporal dimensions.
// Source: International Monetary Fund (<a href="https://www.imf.org/external/terms.htm" target="_blank">IMF Terms of Use</a>), Global Price Index of All Commodities, retrieved from FRED, Federal Reserve Bank of St. Louis. This data feed uses the FRED® API but is <u>not</u> endorsed or certified by the Federal Reserve Bank of St. Louis. By using this data feed, you agree to be bound by the <a href="https://fred.stlouisfed.org/docs/api/terms_of_use.html" target="_blank">FRED® API Terms of Use</a>.
// https://www.alphavantage.co/documentation/#all-commodities
//
// Parameters:
// -	opt_interval: By default, <code>interval=monthly</code>. Strings <code>monthly</code>, <code>quarterly</code>, and <code>annual</code> are accepted.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetAllCommodities(opt_interval, opt_datatype string) api.Response {
	function := "ALL_COMMODITIES"
	params := map[string]string{
		"interval": opt_interval,
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// Endpoint Category: Economic Indicators
// https://www.alphavantage.co/documentation/#economic-indicators
//
// APIs under this section provide key US economic indicators frequently used for investment strategy formulation and application development.

// REAL_GDP
// This API returns the annual and quarterly Real GDP of the United States.
// Source: U.S. Bureau of Economic Analysis, Real Gross Domestic Product, retrieved from FRED, Federal Reserve Bank of St. Louis. This data feed uses the FRED® API but is <u>not</u> endorsed or certified by the Federal Reserve Bank of St. Louis. By using this data feed, you agree to be bound by the <a href="https://fred.stlouisfed.org/docs/api/terms_of_use.html" target="_blank">FRED® API Terms of Use</a>.
// https://www.alphavantage.co/documentation/#real-gdp
//
// Parameters:
// -	opt_interval: By default, <code>interval=annual</code>. Strings <code>quarterly</code> and <code>annual</code> are accepted.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetRealGdp(opt_interval, opt_datatype string) api.Response {
	function := "REAL_GDP"
	params := map[string]string{
		"interval": opt_interval,
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// REAL_GDP_PER_CAPITA
// This API returns the quarterly Real GDP per Capita data of the United States.
// Source: U.S. Bureau of Economic Analysis, Real gross domestic product per capita, retrieved from FRED, Federal Reserve Bank of St. Louis. This data feed uses the FRED® API but is <u>not</u> endorsed or certified by the Federal Reserve Bank of St. Louis. By using this data feed, you agree to be bound by the <a href="https://fred.stlouisfed.org/docs/api/terms_of_use.html" target="_blank">FRED® API Terms of Use</a>.
// https://www.alphavantage.co/documentation/#real-gdp-per-capita
//
// Parameters:
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetRealGdpPerCapita(opt_datatype string) api.Response {
	function := "REAL_GDP_PER_CAPITA"
	params := map[string]string{
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// TREASURY_YIELD
// This API returns the daily, weekly, and monthly US treasury yield of a given maturity timeline (e.g., 5 year, 30 year, etc).
// Source: Board of Governors of the Federal Reserve System (US), Market Yield on U.S. Treasury Securities at 3-month, 2-year, 5-year, 7-year, 10-year, and 30-year Constant Maturities, Quoted on an Investment Basis, retrieved from FRED, Federal Reserve Bank of St. Louis. This data feed uses the FRED® API but is <u>not</u> endorsed or certified by the Federal Reserve Bank of St. Louis. By using this data feed, you agree to be bound by the <a href="https://fred.stlouisfed.org/docs/api/terms_of_use.html" target="_blank">FRED® API Terms of Use</a>.
// https://www.alphavantage.co/documentation/#treasury-yield
//
// Parameters:
// -	opt_interval: By default, <code>interval=monthly</code>. Strings <code>daily</code>, <code>weekly</code>, and <code>monthly</code> are accepted.
// -	opt_maturity: By default, <code>maturity=10year</code>. Strings <code>3month</code>, <code>2year</code>, <code>5year</code>, <code>7year</code>, <code>10year</code>, and <code>30year</code> are accepted.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetTreasuryYield(opt_interval, opt_maturity, opt_datatype string) api.Response {
	function := "TREASURY_YIELD"
	params := map[string]string{
		"interval": opt_interval,
		"maturity": opt_maturity,
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// FEDERAL_FUNDS_RATE
// This API returns the daily, weekly, and monthly federal funds rate (interest rate) of the United States.
// Source: Board of Governors of the Federal Reserve System (US), Federal Funds Effective Rate, retrieved from FRED, Federal Reserve Bank of St. Louis (https://fred.stlouisfed.org/series/FEDFUNDS). This data feed uses the FRED® API but is <u>not</u> endorsed or certified by the Federal Reserve Bank of St. Louis. By using this data feed, you agree to be bound by the <a href="https://fred.stlouisfed.org/docs/api/terms_of_use.html" target="_blank">FRED® API Terms of Use</a>.
// https://www.alphavantage.co/documentation/#interest-rate
//
// Parameters:
// -	opt_interval: By default, <code>interval=monthly</code>. Strings <code>daily</code>, <code>weekly</code>, and <code>monthly</code> are accepted.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetFederalFundsRate(opt_interval, opt_datatype string) api.Response {
	function := "FEDERAL_FUNDS_RATE"
	params := map[string]string{
		"interval": opt_interval,
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// CPI
// This API returns the monthly and semiannual consumer price index (CPI) of the United States. CPI is widely regarded as the barometer of inflation levels in the broader economy.
// Source: U.S. Bureau of Labor Statistics, Consumer Price Index for All Urban Consumers: All Items in U.S. City Average, retrieved from FRED, Federal Reserve Bank of St. Louis. This data feed uses the FRED® API but is <u>not</u> endorsed or certified by the Federal Reserve Bank of St. Louis. By using this data feed, you agree to be bound by the <a href="https://fred.stlouisfed.org/docs/api/terms_of_use.html" target="_blank">FRED® API Terms of Use</a>.
// https://www.alphavantage.co/documentation/#cpi
//
// Parameters:
// -	opt_interval: By default, <code>interval=monthly</code>. Strings <code>monthly</code> and <code>semiannual</code> are accepted.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetCpi(opt_interval, opt_datatype string) api.Response {
	function := "CPI"
	params := map[string]string{
		"interval": opt_interval,
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// INFLATION
// This API returns the annual inflation rates (consumer prices) of the United States.
// Source: World Bank, Inflation, consumer prices for the United States, retrieved from FRED, Federal Reserve Bank of St. Louis. This data feed uses the FRED® API but is <u>not</u> endorsed or certified by the Federal Reserve Bank of St. Louis. By using this data feed, you agree to be bound by the <a href="https://fred.stlouisfed.org/docs/api/terms_of_use.html" target="_blank">FRED® API Terms of Use</a>.
// https://www.alphavantage.co/documentation/#inflation
//
// Parameters:
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetInflation(opt_datatype string) api.Response {
	function := "INFLATION"
	params := map[string]string{
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// RETAIL_SALES
// This API returns the monthly Advance Retail Sales: Retail Trade data of the United States.
// Source: U.S. Census Bureau, Advance Retail Sales: Retail Trade, retrieved from FRED, Federal Reserve Bank of St. Louis (https://fred.stlouisfed.org/series/RSXFSN). This data feed uses the FRED® API but is <u>not</u> endorsed or certified by the Federal Reserve Bank of St. Louis. By using this data feed, you agree to be bound by the <a href="https://fred.stlouisfed.org/docs/api/terms_of_use.html" target="_blank">FRED® API Terms of Use</a>.
// https://www.alphavantage.co/documentation/#retail-sales
//
// Parameters:
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetRetailSales(opt_datatype string) api.Response {
	function := "RETAIL_SALES"
	params := map[string]string{
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// DURABLES
// This API returns the monthly manufacturers&#39; new orders of durable goods in the United States.
// Source: U.S. Census Bureau, Manufacturers&#39; New Orders: Durable Goods, retrieved from FRED, Federal Reserve Bank of St. Louis (https://fred.stlouisfed.org/series/UMDMNO). This data feed uses the FRED® API but is <u>not</u> endorsed or certified by the Federal Reserve Bank of St. Louis. By using this data feed, you agree to be bound by the <a href="https://fred.stlouisfed.org/docs/api/terms_of_use.html" target="_blank">FRED® API Terms of Use</a>.
// https://www.alphavantage.co/documentation/#durable-goods
//
// Parameters:
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetDurables(opt_datatype string) api.Response {
	function := "DURABLES"
	params := map[string]string{
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// UNEMPLOYMENT
// This API returns the monthly unemployment data of the United States. The unemployment rate represents the number of unemployed as a percentage of the labor force. Labor force data are restricted to people 16 years of age and older, who currently reside in 1 of the 50 states or the District of Columbia, who do not reside in institutions (e.g., penal and mental facilities, homes for the aged), and who are not on active duty in the Armed Forces (<a href="https://fred.stlouisfed.org/series/UNRATE" target="_blank">source</a>).
// Source: U.S. Bureau of Labor Statistics, Unemployment Rate, retrieved from FRED, Federal Reserve Bank of St. Louis. This data feed uses the FRED® API but is <u>not</u> endorsed or certified by the Federal Reserve Bank of St. Louis. By using this data feed, you agree to be bound by the <a href="https://fred.stlouisfed.org/docs/api/terms_of_use.html" target="_blank">FRED® API Terms of Use</a>.
// https://www.alphavantage.co/documentation/#unemployment
//
// Parameters:
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetUnemployment(opt_datatype string) api.Response {
	function := "UNEMPLOYMENT"
	params := map[string]string{
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// NONFARM_PAYROLL
// This API returns the monthly US All Employees: Total Nonfarm (commonly known as Total Nonfarm Payroll), a measure of the number of U.S. workers in the economy that excludes proprietors, private household employees, unpaid volunteers, farm employees, and the unincorporated self-employed.
// Source: U.S. Bureau of Labor Statistics, All Employees, Total Nonfarm, retrieved from FRED, Federal Reserve Bank of St. Louis. This data feed uses the FRED® API but is <u>not</u> endorsed or certified by the Federal Reserve Bank of St. Louis. By using this data feed, you agree to be bound by the <a href="https://fred.stlouisfed.org/docs/api/terms_of_use.html" target="_blank">FRED® API Terms of Use</a>.
// https://www.alphavantage.co/documentation/#nonfarm-payroll
//
// Parameters:
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetNonfarmPayroll(opt_datatype string) api.Response {
	function := "NONFARM_PAYROLL"
	params := map[string]string{
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// Endpoint Category: Technical Indicators
// https://www.alphavantage.co/documentation/#technical-indicators
//
// Technical indicator APIs for a given equity or currency exchange pair, derived from the underlying time series based stock API and forex data. All indicators are calculated from adjusted time series data to eliminate artificial price/volume perturbations from historical split and dividend events.

// SMA
// This API returns the simple moving average (SMA) values. See also: <a href="http://www.investopedia.com/articles/technical/052201.asp" target="_blank">Investopedia article</a> and <a href="http://www.fmlabs.com/reference/default.htm?url=SimpleMA.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#sma
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each moving average value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetSma(symbol, interval, time_period, series_type, opt_datatype string) api.Response {
	function := "SMA"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"series_type": series_type,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// EMA
// This API returns the exponential moving average (EMA) values. See also: <a href="http://www.fmlabs.com/reference/default.htm?url=ExpMA.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#ema
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each moving average value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetEma(symbol, interval, time_period, series_type, opt_datatype string) api.Response {
	function := "EMA"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"series_type": series_type,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// WMA
// This API returns the weighted moving average (WMA) values. See also: <a href="http://www.fmlabs.com/reference/default.htm?url=WeightedMA.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#wma
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each moving average value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetWma(symbol, interval, time_period, series_type, opt_datatype string) api.Response {
	function := "WMA"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"series_type": series_type,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// DEMA
// This API returns the double exponential moving average (DEMA) values. See also: <a href="http://www.investopedia.com/articles/trading/10/double-exponential-moving-average.asp" target="_blank">Investopedia article</a> and <a href="http://www.fmlabs.com/reference/default.htm?url=DEMA.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#dema
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each moving average value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetDema(symbol, interval, time_period, series_type, opt_datatype string) api.Response {
	function := "DEMA"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"series_type": series_type,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// TEMA
// This API returns the triple exponential moving average (TEMA) values. See also: <a href="http://www.fmlabs.com/reference/default.htm?url=TEMA.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#tema
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each moving average value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetTema(symbol, interval, time_period, series_type, opt_datatype string) api.Response {
	function := "TEMA"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"series_type": series_type,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// TRIMA
// This API returns the triangular moving average (TRIMA) values. See also: <a href="http://www.fmlabs.com/reference/default.htm?url=TriangularMA.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#trima
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each moving average value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetTrima(symbol, interval, time_period, series_type, opt_datatype string) api.Response {
	function := "TRIMA"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"series_type": series_type,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// KAMA
// This API returns the Kaufman adaptive moving average (KAMA) values.
// https://www.alphavantage.co/documentation/#kama
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each moving average value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetKama(symbol, interval, time_period, series_type, opt_datatype string) api.Response {
	function := "KAMA"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"series_type": series_type,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// MAMA
// This API returns the MESA adaptive moving average (MAMA) values.
// https://www.alphavantage.co/documentation/#mama
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_fastlimit: Positive floats are accepted. By default, <code>fastlimit=0.01</code>.
// -	opt_slowlimit: Positive floats are accepted. By default, <code>slowlimit=0.01</code>.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetMama(symbol, interval, series_type, opt_fastlimit, opt_slowlimit, opt_datatype string) api.Response {
	function := "MAMA"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"series_type": series_type,
		"fastlimit":   opt_fastlimit,
		"slowlimit":   opt_slowlimit,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// VWAP
// This API returns the volume weighted average price (VWAP) for <u>intraday</u> time series. See also: <a href="https://www.investopedia.com/terms/v/vwap.asp" target="_blank">Investopedia article</a>.
// https://www.alphavantage.co/documentation/#vwap
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. In keeping with mainstream investment literatures on VWAP, the following intraday intervals are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetVwap(symbol, interval, opt_datatype string) api.Response {
	function := "VWAP"
	params := map[string]string{
		"symbol":   symbol,
		"interval": interval,
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// T3
// This API returns the triple exponential moving average (T3) values. See also: <a href="http://www.fmlabs.com/reference/default.htm?url=T3.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#t3
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each moving average value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetT3(symbol, interval, time_period, series_type, opt_datatype string) api.Response {
	function := "T3"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"series_type": series_type,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// MACD
// This API returns the moving average convergence / divergence (MACD) values. See also: <a href="http://www.investopedia.com/articles/forex/05/macddiverge.asp" target="_blank">Investopedia article</a> and <a href="http://www.fmlabs.com/reference/default.htm?url=MACD.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#macd
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_fastperiod: Positive integers are accepted. By default, <code>fastperiod=12</code>.
// -	opt_slowperiod: Positive integers are accepted. By default, <code>slowperiod=26</code>.
// -	opt_signalperiod: Positive integers are accepted. By default, <code>signalperiod=9</code>.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetMacd(symbol, interval, series_type, opt_fastperiod, opt_slowperiod, opt_signalperiod, opt_datatype string) api.Response {
	function := "MACD"
	params := map[string]string{
		"symbol":       symbol,
		"interval":     interval,
		"series_type":  series_type,
		"fastperiod":   opt_fastperiod,
		"slowperiod":   opt_slowperiod,
		"signalperiod": opt_signalperiod,
		"datatype":     opt_datatype,
	}

	return a.client.Query(function, params)
}

// MACDEXT
// This API returns the moving average convergence / divergence values with controllable moving average type. See also: <a href="http://www.investopedia.com/articles/forex/05/macddiverge.asp" target="_blank">Investopedia article</a> and <a href="http://www.fmlabs.com/reference/default.htm?url=MACD.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#macdext
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_fastperiod: Positive integers are accepted. By default, <code>fastperiod=12</code>.
// -	opt_slowperiod: Positive integers are accepted. By default, <code>slowperiod=26</code>.
// -	opt_signalperiod: Positive integers are accepted. By default, <code>signalperiod=9</code>.
// -	opt_fastmatype: Moving average type for the faster moving average. By default, <code>fastmatype=0</code>. Integers 0 - 8 are accepted with the following mappings. 0 = Simple Moving Average (SMA), 1 = Exponential Moving Average (EMA), 2 = Weighted Moving Average (WMA), 3 = Double Exponential Moving Average (DEMA), 4 = Triple Exponential Moving Average (TEMA), 5 = Triangular Moving Average (TRIMA), 6 = T3 Moving Average, 7 = Kaufman Adaptive Moving Average (KAMA), 8 = MESA Adaptive Moving Average (MAMA).
// -	opt_slowmatype: Moving average type for the slower moving average. By default, <code>slowmatype=0</code>. Integers 0 - 8 are accepted with the following mappings. 0 = Simple Moving Average (SMA), 1 = Exponential Moving Average (EMA), 2 = Weighted Moving Average (WMA), 3 = Double Exponential Moving Average (DEMA), 4 = Triple Exponential Moving Average (TEMA), 5 = Triangular Moving Average (TRIMA), 6 = T3 Moving Average, 7 = Kaufman Adaptive Moving Average (KAMA), 8 = MESA Adaptive Moving Average (MAMA).
// -	opt_signalmatype: Moving average type for the signal moving average. By default, <code>signalmatype=0</code>. Integers 0 - 8 are accepted with the following mappings. 0 = Simple Moving Average (SMA), 1 = Exponential Moving Average (EMA), 2 = Weighted Moving Average (WMA), 3 = Double Exponential Moving Average (DEMA), 4 = Triple Exponential Moving Average (TEMA), 5 = Triangular Moving Average (TRIMA), 6 = T3 Moving Average, 7 = Kaufman Adaptive Moving Average (KAMA), 8 = MESA Adaptive Moving Average (MAMA).
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetMacdext(symbol, interval, series_type, opt_fastperiod, opt_slowperiod, opt_signalperiod, opt_fastmatype, opt_slowmatype, opt_signalmatype, opt_datatype string) api.Response {
	function := "MACDEXT"
	params := map[string]string{
		"symbol":       symbol,
		"interval":     interval,
		"series_type":  series_type,
		"fastperiod":   opt_fastperiod,
		"slowperiod":   opt_slowperiod,
		"signalperiod": opt_signalperiod,
		"fastmatype":   opt_fastmatype,
		"slowmatype":   opt_slowmatype,
		"signalmatype": opt_signalmatype,
		"datatype":     opt_datatype,
	}

	return a.client.Query(function, params)
}

// [PREMIUM] STOCH
// This API returns the stochastic oscillator (STOCH) values. See also: <a href="https://www.investopedia.com/terms/s/stochasticoscillator.asp" target="_blank">Investopedia article</a> and <a href="http://www.fmlabs.com/reference/default.htm?url=StochasticOscillator.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#stoch
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	opt_fastkperiod: The time period of the fastk moving average. Positive integers are accepted. By default, <code>fastkperiod=5</code>.
// -	opt_slowkperiod: The time period of the slowk moving average. Positive integers are accepted. By default, <code>slowkperiod=3</code>.
// -	opt_slowdperiod: The time period of the slowd moving average. Positive integers are accepted. By default, <code>slowdperiod=3</code>.
// -	opt_slowkmatype: Moving average type for the slowk moving average. By default, <code>slowkmatype=0</code>. Integers 0 - 8 are accepted with the following mappings. 0 = Simple Moving Average (SMA), 1 = Exponential Moving Average (EMA), 2 = Weighted Moving Average (WMA), 3 = Double Exponential Moving Average (DEMA), 4 = Triple Exponential Moving Average (TEMA), 5 = Triangular Moving Average (TRIMA), 6 = T3 Moving Average, 7 = Kaufman Adaptive Moving Average (KAMA), 8 = MESA Adaptive Moving Average (MAMA).
// -	opt_slowdmatype: Moving average type for the slowd moving average. By default, <code>slowdmatype=0</code>. Integers 0 - 8 are accepted with the following mappings. 0 = Simple Moving Average (SMA), 1 = Exponential Moving Average (EMA), 2 = Weighted Moving Average (WMA), 3 = Double Exponential Moving Average (DEMA), 4 = Triple Exponential Moving Average (TEMA), 5 = Triangular Moving Average (TRIMA), 6 = T3 Moving Average, 7 = Kaufman Adaptive Moving Average (KAMA), 8 = MESA Adaptive Moving Average (MAMA).
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetStoch(symbol, interval, opt_fastkperiod, opt_slowkperiod, opt_slowdperiod, opt_slowkmatype, opt_slowdmatype, opt_datatype string) api.Response {
	function := "STOCH"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"fastkperiod": opt_fastkperiod,
		"slowkperiod": opt_slowkperiod,
		"slowdperiod": opt_slowdperiod,
		"slowkmatype": opt_slowkmatype,
		"slowdmatype": opt_slowdmatype,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// STOCHF
// This API returns the stochastic fast (STOCHF) values. See also: <a href="http://www.investopedia.com/university/indicator_oscillator/ind_osc8.asp" target="_blank">Investopedia article</a> and <a href="http://www.fmlabs.com/reference/default.htm?url=StochasticOscillator.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#stochf
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	opt_fastkperiod: The time period of the fastk moving average. Positive integers are accepted. By default, <code>fastkperiod=5</code>.
// -	opt_fastdperiod: The time period of the fastd moving average. Positive integers are accepted. By default, <code>fastdperiod=3</code>.
// -	opt_fastdmatype: Moving average type for the fastd moving average. By default, <code>fastdmatype=0</code>. Integers 0 - 8 are accepted with the following mappings. 0 = Simple Moving Average (SMA), 1 = Exponential Moving Average (EMA), 2 = Weighted Moving Average (WMA), 3 = Double Exponential Moving Average (DEMA), 4 = Triple Exponential Moving Average (TEMA), 5 = Triangular Moving Average (TRIMA), 6 = T3 Moving Average, 7 = Kaufman Adaptive Moving Average (KAMA), 8 = MESA Adaptive Moving Average (MAMA).
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetStochf(symbol, interval, opt_fastkperiod, opt_fastdperiod, opt_fastdmatype, opt_datatype string) api.Response {
	function := "STOCHF"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"fastkperiod": opt_fastkperiod,
		"fastdperiod": opt_fastdperiod,
		"fastdmatype": opt_fastdmatype,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// [PREMIUM] RSI
// This API returns the relative strength index (RSI) values. See also: <a href="http://www.investopedia.com/articles/technical/071601.asp" target="_blank">Investopedia article</a> and <a href="http://www.fmlabs.com/reference/default.htm?url=RSI.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#rsi
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each RSI value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetRsi(symbol, interval, time_period, series_type, opt_datatype string) api.Response {
	function := "RSI"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"series_type": series_type,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// STOCHRSI
// This API returns the stochastic relative strength index (STOCHRSI) values. See also: <a href="http://www.fmlabs.com/reference/default.htm?url=StochRSI.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#stochrsi
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each STOCHRSI value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_fastkperiod: The time period of the fastk moving average. Positive integers are accepted. By default, <code>fastkperiod=5</code>.
// -	opt_fastdperiod: The time period of the fastd moving average. Positive integers are accepted. By default, <code>fastdperiod=3</code>.
// -	opt_fastdmatype: Moving average type for the fastd moving average. By default, <code>fastdmatype=0</code>. Integers 0 - 8 are accepted with the following mappings.  0 = Simple Moving Average (SMA), 1 = Exponential Moving Average (EMA), 2 = Weighted Moving Average (WMA), 3 = Double Exponential Moving Average (DEMA), 4 = Triple Exponential Moving Average (TEMA), 5 = Triangular Moving Average (TRIMA), 6 = T3 Moving Average, 7 = Kaufman Adaptive Moving Average (KAMA), 8 = MESA Adaptive Moving Average (MAMA).
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetStochrsi(symbol, interval, time_period, series_type, opt_fastkperiod, opt_fastdperiod, opt_fastdmatype, opt_datatype string) api.Response {
	function := "STOCHRSI"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"series_type": series_type,
		"fastkperiod": opt_fastkperiod,
		"fastdperiod": opt_fastdperiod,
		"fastdmatype": opt_fastdmatype,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// WILLR
// This API returns the Williams&#39; %R (WILLR) values. See also: <a href="http://www.fmlabs.com/reference/default.htm?url=WilliamsR.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#willr
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each WILLR value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetWillr(symbol, interval, time_period, opt_datatype string) api.Response {
	function := "WILLR"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// [PREMIUM] ADX
// This API returns the average directional movement index (ADX) values. See also: <a href="http://www.investopedia.com/articles/trading/07/adx-trend-indicator.asp" target="_blank">Investopedia article</a> and <a href="http://www.fmlabs.com/reference/default.htm?url=ADX.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#adx
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each ADX value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetAdx(symbol, interval, time_period, opt_datatype string) api.Response {
	function := "ADX"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// ADXR
// This API returns the average directional movement index rating (ADXR) values. See also: <a href="http://www.fmlabs.com/reference/default.htm?url=ADXR.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#adxr
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each ADXR value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetAdxr(symbol, interval, time_period, opt_datatype string) api.Response {
	function := "ADXR"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// APO
// This API returns the absolute price oscillator (APO) values. See also: <a href="http://www.fmlabs.com/reference/default.htm?url=PriceOscillator.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#apo
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_fastperiod: Positive integers are accepted. By default, <code>fastperiod=12</code>.
// -	opt_slowperiod: Positive integers are accepted. By default, <code>slowperiod=26</code>.
// -	opt_matype: Moving average type. By default, <code>matype=0</code>. Integers 0 - 8 are accepted with the following mappings. 0 = Simple Moving Average (SMA), 1 = Exponential Moving Average (EMA), 2 = Weighted Moving Average (WMA), 3 = Double Exponential Moving Average (DEMA), 4 = Triple Exponential Moving Average (TEMA), 5 = Triangular Moving Average (TRIMA), 6 = T3 Moving Average, 7 = Kaufman Adaptive Moving Average (KAMA), 8 = MESA Adaptive Moving Average (MAMA).
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetApo(symbol, interval, series_type, opt_fastperiod, opt_slowperiod, opt_matype, opt_datatype string) api.Response {
	function := "APO"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"series_type": series_type,
		"fastperiod":  opt_fastperiod,
		"slowperiod":  opt_slowperiod,
		"matype":      opt_matype,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// PPO
// This API returns the percentage price oscillator (PPO) values. See also: <a href="http://www.investopedia.com/articles/investing/051214/use-percentage-price-oscillator-elegant-indicator-picking-stocks.asp" target="_blank">Investopedia article</a> and <a href="http://www.fmlabs.com/reference/default.htm?url=PriceOscillatorPct.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#ppo
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_fastperiod: Positive integers are accepted. By default, <code>fastperiod=12</code>.
// -	opt_slowperiod: Positive integers are accepted. By default, <code>slowperiod=26</code>.
// -	opt_matype: Moving average type. By default, <code>matype=0</code>. Integers 0 - 8 are accepted with the following mappings. 0 = Simple Moving Average (SMA), 1 = Exponential Moving Average (EMA), 2 = Weighted Moving Average (WMA), 3 = Double Exponential Moving Average (DEMA), 4 = Triple Exponential Moving Average (TEMA), 5 = Triangular Moving Average (TRIMA), 6 = T3 Moving Average, 7 = Kaufman Adaptive Moving Average (KAMA), 8 = MESA Adaptive Moving Average (MAMA).
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetPpo(symbol, interval, series_type, opt_fastperiod, opt_slowperiod, opt_matype, opt_datatype string) api.Response {
	function := "PPO"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"series_type": series_type,
		"fastperiod":  opt_fastperiod,
		"slowperiod":  opt_slowperiod,
		"matype":      opt_matype,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// MOM
// This API returns the momentum (MOM) values. See also: <a href="http://www.investopedia.com/articles/technical/03/070203.asp" target="_blank">Investopedia article</a> and <a href="http://www.fmlabs.com/reference/default.htm?url=Momentum.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#mom
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each MOM value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetMom(symbol, interval, time_period, series_type, opt_datatype string) api.Response {
	function := "MOM"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"series_type": series_type,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// BOP
// This API returns the balance of power (BOP) values.
// https://www.alphavantage.co/documentation/#bop
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetBop(symbol, interval, opt_datatype string) api.Response {
	function := "BOP"
	params := map[string]string{
		"symbol":   symbol,
		"interval": interval,
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// [PREMIUM] CCI
// This API returns the commodity channel index (CCI) values. See also: <a href="http://www.investopedia.com/articles/trading/05/041805.asp" target="_blank">Investopedia article</a> and <a href="http://www.fmlabs.com/reference/default.htm?url=CCI.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#cci
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each CCI value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetCci(symbol, interval, time_period, opt_datatype string) api.Response {
	function := "CCI"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// CMO
// This API returns the Chande momentum oscillator (CMO) values. See also: <a href="http://www.fmlabs.com/reference/default.htm?url=CMO.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#cmo
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each CMO value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetCmo(symbol, interval, time_period, series_type, opt_datatype string) api.Response {
	function := "CMO"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"series_type": series_type,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// ROC
// This API returns the rate of change (ROC) values. See also: <a href="http://www.investopedia.com/articles/technical/092401.asp" target="_blank">Investopedia article</a>.
// https://www.alphavantage.co/documentation/#roc
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each ROC value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetRoc(symbol, interval, time_period, series_type, opt_datatype string) api.Response {
	function := "ROC"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"series_type": series_type,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// ROCR
// This API returns the rate of change ratio (ROCR) values. See also: <a href="http://www.investopedia.com/articles/technical/092401.asp" target="_blank">Investopedia article</a>.
// https://www.alphavantage.co/documentation/#rocr
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each ROCR value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetRocr(symbol, interval, time_period, series_type, opt_datatype string) api.Response {
	function := "ROCR"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"series_type": series_type,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// AROON
// This API returns the Aroon (AROON) values. See also: <a href="http://www.investopedia.com/articles/trading/06/aroon.asp" target="_blank">Investopedia article</a> and <a href="http://www.fmlabs.com/reference/default.htm?url=Aroon.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#aroon
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each AROON value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetAroon(symbol, interval, time_period, opt_datatype string) api.Response {
	function := "AROON"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// AROONOSC
// This API returns the Aroon oscillator (AROONOSC) values. See also: <a href="http://www.fmlabs.com/reference/default.htm?url=AroonOscillator.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#aroonosc
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each AROONOSC value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetAroonosc(symbol, interval, time_period, opt_datatype string) api.Response {
	function := "AROONOSC"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// MFI
// This API returns the money flow index (MFI) values. See also: <a href="http://www.investopedia.com/articles/technical/03/072303.asp" target="_blank">Investopedia article</a> and <a href="http://www.fmlabs.com/reference/default.htm?url=MoneyFlowIndex.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#mfi
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each MFI value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetMfi(symbol, interval, time_period, opt_datatype string) api.Response {
	function := "MFI"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// TRIX
// This API returns the 1-day rate of change of a triple smooth exponential moving average (TRIX) values. See also: <a href="http://www.investopedia.com/articles/technical/02/092402.asp" target="_blank">Investopedia article</a> and <a href="http://www.fmlabs.com/reference/default.htm?url=TRIX.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#trix
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each TRIX value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetTrix(symbol, interval, time_period, series_type, opt_datatype string) api.Response {
	function := "TRIX"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"series_type": series_type,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// ULTOSC
// This API returns the ultimate oscillator (ULTOSC) values. See also: <a href="http://www.fmlabs.com/reference/default.htm?url=UltimateOsc.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#ultosc
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	opt_timeperiod1: The first time period for the indicator. Positive integers are accepted. By default, <code>timeperiod1=7</code>.
// -	opt_timeperiod2: The second time period for the indicator. Positive integers are accepted. By default, <code>timeperiod2=14</code>.
// -	opt_timeperiod3: The third time period for the indicator. Positive integers are accepted. By default, <code>timeperiod3=28</code>.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetUltosc(symbol, interval, opt_timeperiod1, opt_timeperiod2, opt_timeperiod3, opt_datatype string) api.Response {
	function := "ULTOSC"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"timeperiod1": opt_timeperiod1,
		"timeperiod2": opt_timeperiod2,
		"timeperiod3": opt_timeperiod3,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// DX
// This API returns the directional movement index (DX) values. See also: <a href="http://www.investopedia.com/articles/technical/02/050602.asp" target="_blank">Investopedia article</a> and <a href="http://www.fmlabs.com/reference/default.htm?url=DX.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#dx
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each DX value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetDx(symbol, interval, time_period, opt_datatype string) api.Response {
	function := "DX"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// MINUS_DI
// This API returns the minus directional indicator (MINUS_DI) values. See also: <a href="http://www.investopedia.com/articles/technical/02/050602.asp" target="_blank">Investopedia article</a> and <a href="http://www.fmlabs.com/reference/default.htm?url=DI.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#minusdi
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each MINUS_DI value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetMinusDi(symbol, interval, time_period, opt_datatype string) api.Response {
	function := "MINUS_DI"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// PLUS_DI
// This API returns the plus directional indicator (PLUS_DI) values. See also: <a href="http://www.investopedia.com/articles/technical/02/050602.asp" target="_blank">Investopedia article</a> and <a href="http://www.fmlabs.com/reference/default.htm?url=DI.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#plusdi
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each PLUS_DI value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetPlusDi(symbol, interval, time_period, opt_datatype string) api.Response {
	function := "PLUS_DI"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// MINUS_DM
// This API returns the minus directional movement (MINUS_DM) values. See also: <a href="http://www.investopedia.com/articles/technical/02/050602.asp" target="_blank">Investopedia article</a>
// https://www.alphavantage.co/documentation/#minusdm
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each MINUS_DM value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetMinusDm(symbol, interval, time_period, opt_datatype string) api.Response {
	function := "MINUS_DM"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// PLUS_DM
// This API returns the plus directional movement (PLUS_DM) values. See also: <a href="http://www.investopedia.com/articles/technical/02/050602.asp" target="_blank">Investopedia article</a>
// https://www.alphavantage.co/documentation/#plusdm
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each PLUS_DM value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetPlusDm(symbol, interval, time_period, opt_datatype string) api.Response {
	function := "PLUS_DM"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// BBANDS
// This API returns the Bollinger bands (BBANDS) values. See also: <a href="http://www.investopedia.com/articles/technical/04/030304.asp" target="_blank">Investopedia article</a> and <a href="http://www.fmlabs.com/reference/default.htm?url=Bollinger.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#bbands
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each BBANDS value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_nbdevup: The standard deviation multiplier of the upper band. Positive integers are accepted. By default, <code>nbdevup=2</code>.
// -	opt_nbdevdn: The standard deviation multiplier of the lower band. Positive integers are accepted. By default, <code>nbdevdn=2</code>.
// -	opt_matype: Moving average type of the time series. By default, <code>matype=0</code>. Integers 0 - 8 are accepted with the following mappings. 0 = Simple Moving Average (SMA), 1 = Exponential Moving Average (EMA), 2 = Weighted Moving Average (WMA), 3 = Double Exponential Moving Average (DEMA), 4 = Triple Exponential Moving Average (TEMA), 5 = Triangular Moving Average (TRIMA), 6 = T3 Moving Average, 7 = Kaufman Adaptive Moving Average (KAMA), 8 = MESA Adaptive Moving Average (MAMA).
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetBbands(symbol, interval, time_period, series_type, opt_nbdevup, opt_nbdevdn, opt_matype, opt_datatype string) api.Response {
	function := "BBANDS"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"series_type": series_type,
		"nbdevup":     opt_nbdevup,
		"nbdevdn":     opt_nbdevdn,
		"matype":      opt_matype,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// MIDPOINT
// This API returns the midpoint (MIDPOINT) values. MIDPOINT = (highest value + lowest value)/2.
// https://www.alphavantage.co/documentation/#midpoint
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each MIDPOINT value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetMidpoint(symbol, interval, time_period, series_type, opt_datatype string) api.Response {
	function := "MIDPOINT"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"series_type": series_type,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// MIDPRICE
// This API returns the midpoint price (MIDPRICE) values. MIDPRICE = (highest high + lowest low)/2.
// https://www.alphavantage.co/documentation/#midprice
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each MIDPRICE value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetMidprice(symbol, interval, time_period, opt_datatype string) api.Response {
	function := "MIDPRICE"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// SAR
// This API returns the parabolic SAR (SAR) values. See also: <a href="http://www.investopedia.com/articles/technical/02/042202.asp" target="_blank">Investopedia article</a> and <a href="http://www.fmlabs.com/reference/default.htm?url=SAR.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#sar
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	opt_acceleration: The acceleration factor. Positive floats are accepted. By default, <code>acceleration=0.01</code>.
// -	opt_maximum: The acceleration factor maximum value. Positive floats are accepted. By default, <code>maximum=0.20</code>.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetSar(symbol, interval, opt_acceleration, opt_maximum, opt_datatype string) api.Response {
	function := "SAR"
	params := map[string]string{
		"symbol":       symbol,
		"interval":     interval,
		"acceleration": opt_acceleration,
		"maximum":      opt_maximum,
		"datatype":     opt_datatype,
	}

	return a.client.Query(function, params)
}

// TRANGE
// This API returns the true range (TRANGE) values. See also: <a href="http://www.fmlabs.com/reference/default.htm?url=TR.htm" target="_blank">mathematical reference</a>
// https://www.alphavantage.co/documentation/#trange
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetTrange(symbol, interval, opt_datatype string) api.Response {
	function := "TRANGE"
	params := map[string]string{
		"symbol":   symbol,
		"interval": interval,
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// ATR
// This API returns the average true range (ATR) values. See also: <a href="http://www.investopedia.com/articles/trading/08/average-true-range.asp" target="_blank">Investopedia article</a> and <a href="http://www.fmlabs.com/reference/default.htm?url=ATR.htm" target="_blank">mathematical reference</a>
// https://www.alphavantage.co/documentation/#atr
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each ATR value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetAtr(symbol, interval, time_period, opt_datatype string) api.Response {
	function := "ATR"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// NATR
// This API returns the normalized average true range (NATR) values.
// https://www.alphavantage.co/documentation/#natr
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	time_period: Number of data points used to calculate each NATR value. Positive integers are accepted (e.g., <code>time_period=60</code>, <code>time_period=200</code>)
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetNatr(symbol, interval, time_period, opt_datatype string) api.Response {
	function := "NATR"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"time_period": time_period,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// AD
// This API returns the Chaikin A/D line (AD) values. See also: <a href="http://www.investopedia.com/articles/active-trading/031914/understanding-chaikin-oscillator.asp" target="_blank">Investopedia article</a> and <a href="http://www.fmlabs.com/reference/default.htm?url=AccumDist.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#ad
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetAd(symbol, interval, opt_datatype string) api.Response {
	function := "AD"
	params := map[string]string{
		"symbol":   symbol,
		"interval": interval,
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// ADOSC
// This API returns the Chaikin A/D oscillator (ADOSC) values. See also: <a href="http://www.investopedia.com/articles/active-trading/031914/understanding-chaikin-oscillator.asp" target="_blank">Investopedia article</a> and <a href="http://www.fmlabs.com/reference/default.htm?url=AccumDist.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#adosc
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	opt_fastperiod: The time period of the fast EMA. Positive integers are accepted. By default, <code>fastperiod=3</code>.
// -	opt_slowperiod: The time period of the slow EMA. Positive integers are accepted. By default, <code>slowperiod=10</code>.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetAdosc(symbol, interval, opt_fastperiod, opt_slowperiod, opt_datatype string) api.Response {
	function := "ADOSC"
	params := map[string]string{
		"symbol":     symbol,
		"interval":   interval,
		"fastperiod": opt_fastperiod,
		"slowperiod": opt_slowperiod,
		"datatype":   opt_datatype,
	}

	return a.client.Query(function, params)
}

// OBV
// This API returns the on balance volume (OBV) values. See also: <a href="http://www.investopedia.com/articles/technical/100801.asp" target="_blank">Investopedia article</a> and <a href="http://www.fmlabs.com/reference/default.htm?url=OBV.htm" target="_blank">mathematical reference</a>.
// https://www.alphavantage.co/documentation/#obv
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetObv(symbol, interval, opt_datatype string) api.Response {
	function := "OBV"
	params := map[string]string{
		"symbol":   symbol,
		"interval": interval,
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// HT_TRENDLINE
// This API returns the Hilbert transform, instantaneous trendline (HT_TRENDLINE) values.
// https://www.alphavantage.co/documentation/#httrendline
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetHtTrendline(symbol, interval, series_type, opt_datatype string) api.Response {
	function := "HT_TRENDLINE"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"series_type": series_type,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// HT_SINE
// This API returns the Hilbert transform, sine wave (HT_SINE) values.
// https://www.alphavantage.co/documentation/#htsine
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetHtSine(symbol, interval, series_type, opt_datatype string) api.Response {
	function := "HT_SINE"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"series_type": series_type,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// HT_TRENDMODE
// This API returns the Hilbert transform, trend vs cycle mode (HT_TRENDMODE) values.
// https://www.alphavantage.co/documentation/#httrendmode
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetHtTrendmode(symbol, interval, series_type, opt_datatype string) api.Response {
	function := "HT_TRENDMODE"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"series_type": series_type,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// HT_DCPERIOD
// This API returns the Hilbert transform, dominant cycle period (HT_DCPERIOD) values.
// https://www.alphavantage.co/documentation/#htdcperiod
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetHtDcperiod(symbol, interval, series_type, opt_datatype string) api.Response {
	function := "HT_DCPERIOD"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"series_type": series_type,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// HT_DCPHASE
// This API returns the Hilbert transform, dominant cycle phase (HT_DCPHASE) values.
// https://www.alphavantage.co/documentation/#htdcphase
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetHtDcphase(symbol, interval, series_type, opt_datatype string) api.Response {
	function := "HT_DCPHASE"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"series_type": series_type,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// HT_PHASOR
// This API returns the Hilbert transform, phasor components (HT_PHASOR) values.
// https://www.alphavantage.co/documentation/#htphasor
//
// Parameters:
// -	symbol: The name of the token of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>
// -	series_type: The desired price type in the time series. Four types are supported: <code>close</code>, <code>open</code>, <code>high</code>, <code>low</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetHtPhasor(symbol, interval, series_type, opt_datatype string) api.Response {
	function := "HT_PHASOR"
	params := map[string]string{
		"symbol":      symbol,
		"interval":    interval,
		"series_type": series_type,
		"datatype":    opt_datatype,
	}

	return a.client.Query(function, params)
}

// Endpoint Category: Time Series Stock Data APIs
// https://www.alphavantage.co/documentation/#time-series-data
//
// This suite of APIs provide global equity data in 4 different temporal resolutions: (1) daily, (2) weekly, (3) monthly, and (4) intraday. Daily, weekly, and monthly time series contain 20+ years of historical data.

// TIME_SERIES_INTRADAY
// This API returns intraday time series of the equity specified, covering <u>extended trading hours</u> where applicable (e.g., 4:00am to 8:00pm Eastern Time for the US market). The intraday data is derived from the Securities Information Processor (SIP) market-aggregated data. You can query both raw (as-traded) and split/dividend-adjusted intraday data from this endpoint.
// This API returns the most recent 1-2 months of intraday data and is best suited for short-term/medium-term charting and trading strategy development. If you are targeting a deeper intraday history, please use the <a href="#intraday-extended">Extended Intraday API</a>.
// https://www.alphavantage.co/documentation/#intraday
//
// Parameters:
// -	symbol: The name of the equity of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>
// -	opt_adjusted: By default, <code>adjusted=true</code> and the output time series is adjusted by historical split and dividend events. Set <code>adjusted=false</code> to query raw (as-traded) intraday values.
// -	opt_outputsize: By default, <code>outputsize=compact</code>. Strings <code>compact</code> and <code>full</code> are accepted with the following specifications: <code>compact</code> returns only the latest 100 data points in the intraday time series; <code>full</code> returns the full-length intraday time series. The &#34;compact&#34; option is recommended if you would like to reduce the data size of each API call.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the intraday time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetTimeSeriesIntraday(symbol, interval, opt_adjusted, opt_outputsize, opt_datatype string) api.Response {
	function := "TIME_SERIES_INTRADAY"
	params := map[string]string{
		"symbol":     symbol,
		"interval":   interval,
		"adjusted":   opt_adjusted,
		"outputsize": opt_outputsize,
		"datatype":   opt_datatype,
	}

	return a.client.Query(function, params)
}

// Intraday (Extended History)
// This API returns historical intraday time series for the trailing 2 years, covering over 2 million data points per ticker. The intraday data is derived from the Securities Information Processor (SIP) market-aggregated data. You can query both raw (as-traded) and split/dividend-adjusted intraday data from this endpoint. Common use cases for this API include data visualization, trading simulation/backtesting, and machine learning and deep learning applications with a longer horizon.
// https://www.alphavantage.co/documentation/#intraday-extended
//
// Parameters:
// -	symbol: The name of the equity of your choice. For example: <code>symbol=IBM</code>
// -	interval: Time interval between two consecutive data points in the time series. The following values are supported: <code>1min</code>, <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>60min</code>
// -	slice: Two years of minute-level intraday data contains over 2 million data points, which can take up to Gigabytes of memory. To ensure optimal API response speed, the trailing 2 years of intraday data is evenly divided into 24 &#34;slices&#34; - <code>year1month1</code>, <code>year1month2</code>, <code>year1month3</code>, ..., <code>year1month11</code>, <code>year1month12</code>, <code>year2month1</code>, <code>year2month2</code>, <code>year2month3</code>, ..., <code>year2month11</code>, <code>year2month12</code>. Each slice is a 30-day window, with <code>year1month1</code> being the most recent and <code>year2month12</code> being the farthest from today. By default, <code>slice=year1month1</code>.
// -	opt_adjusted: By default, <code>adjusted=true</code> and the output time series is adjusted by historical split and dividend events. Set <code>adjusted=false</code> to query raw (as-traded) intraday values.
func (a *Alphavantage) GetTimeSeriesIntradayExtended(symbol, interval, slice, opt_adjusted string) api.Response {
	function := "TIME_SERIES_INTRADAY_EXTENDED"
	params := map[string]string{
		"symbol":   symbol,
		"interval": interval,
		"slice":    slice,
		"adjusted": opt_adjusted,
	}

	return a.client.Query(function, params)
}

// [PREMIUM] TIME_SERIES_DAILY
// This API returns <u>raw</u> (as-traded) daily time series (date, daily open, daily high, daily low, daily close, daily volume) of the global equity specified, covering 20+ years of historical data. If you are also interested in split/dividend-adjusted historical data, please use the <a href="#dailyadj">Daily Adjusted API</a>, which covers adjusted close values and historical split and dividend events.
// https://www.alphavantage.co/documentation/#daily
//
// Parameters:
// -	symbol: The name of the equity of your choice. For example: <code>symbol=IBM</code>
// -	opt_outputsize: By default, <code>outputsize=compact</code>. Strings <code>compact</code> and <code>full</code> are accepted with the following specifications: <code>compact</code> returns only the latest 100 data points; <code>full</code> returns the full-length time series of 20+ years of historical data. The &#34;compact&#34; option is recommended if you would like to reduce the data size of each API call.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetTimeSeriesDaily(symbol, opt_outputsize, opt_datatype string) api.Response {
	function := "TIME_SERIES_DAILY"
	params := map[string]string{
		"symbol":     symbol,
		"outputsize": opt_outputsize,
		"datatype":   opt_datatype,
	}

	return a.client.Query(function, params)
}

// TIME_SERIES_DAILY_ADJUSTED
// This API returns raw (as-traded) daily open/high/low/close/volume values, daily adjusted close values, and historical split/dividend events of the global equity specified, covering 20+ years of historical data.
// https://www.alphavantage.co/documentation/#dailyadj
//
// Parameters:
// -	symbol: The name of the equity of your choice. For example: <code>symbol=IBM</code>
// -	opt_outputsize: By default, <code>outputsize=compact</code>. Strings <code>compact</code> and <code>full</code> are accepted with the following specifications: <code>compact</code> returns only the latest 100 data points; <code>full</code> returns the full-length time series of 20+ years of historical data. The &#34;compact&#34; option is recommended if you would like to reduce the data size of each API call.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the daily time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetTimeSeriesDailyAdjusted(symbol, opt_outputsize, opt_datatype string) api.Response {
	function := "TIME_SERIES_DAILY_ADJUSTED"
	params := map[string]string{
		"symbol":     symbol,
		"outputsize": opt_outputsize,
		"datatype":   opt_datatype,
	}

	return a.client.Query(function, params)
}

// TIME_SERIES_WEEKLY
// This API returns weekly time series (last trading day of each week, weekly open, weekly high, weekly low, weekly close, weekly volume) of the global equity specified, covering 20+ years of historical data.
// https://www.alphavantage.co/documentation/#weekly
//
// Parameters:
// -	symbol: The name of the equity of your choice. For example: <code>symbol=IBM</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the weekly time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetTimeSeriesWeekly(symbol, opt_datatype string) api.Response {
	function := "TIME_SERIES_WEEKLY"
	params := map[string]string{
		"symbol":   symbol,
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// TIME_SERIES_WEEKLY_ADJUSTED
// This API returns weekly adjusted time series (last trading day of each week, weekly open, weekly high, weekly low, weekly close, weekly adjusted close, weekly volume, weekly dividend) of the global equity specified, covering 20+ years of historical data.
// https://www.alphavantage.co/documentation/#weeklyadj
//
// Parameters:
// -	symbol: The name of the equity of your choice. For example: <code>symbol=IBM</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the weekly time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetTimeSeriesWeeklyAdjusted(symbol, opt_datatype string) api.Response {
	function := "TIME_SERIES_WEEKLY_ADJUSTED"
	params := map[string]string{
		"symbol":   symbol,
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// TIME_SERIES_MONTHLY
// This API returns monthly time series (last trading day of each month, monthly open, monthly high, monthly low, monthly close, monthly volume) of the global equity specified, covering 20+ years of historical data.
// https://www.alphavantage.co/documentation/#monthly
//
// Parameters:
// -	symbol: The name of the equity of your choice. For example: <code>symbol=IBM</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the monthly time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetTimeSeriesMonthly(symbol, opt_datatype string) api.Response {
	function := "TIME_SERIES_MONTHLY"
	params := map[string]string{
		"symbol":   symbol,
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// TIME_SERIES_MONTHLY_ADJUSTED
// This API returns monthly adjusted time series (last trading day of each month, monthly open, monthly high, monthly low, monthly close, monthly adjusted close, monthly volume, monthly dividend) of the equity specified, covering 20+ years of historical data.
// https://www.alphavantage.co/documentation/#monthlyadj
//
// Parameters:
// -	symbol: The name of the equity of your choice. For example: <code>symbol=IBM</code>
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the monthly time series in JSON format; <code>csv</code> returns the time series as a CSV (comma separated value) file.
func (a *Alphavantage) GetTimeSeriesMonthlyAdjusted(symbol, opt_datatype string) api.Response {
	function := "TIME_SERIES_MONTHLY_ADJUSTED"
	params := map[string]string{
		"symbol":   symbol,
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// Quote Endpoint
// A lightweight alternative to the time series APIs, this service returns the price and volume information for a token of your choice.
// https://www.alphavantage.co/documentation/#latestprice
//
// Parameters:
// -	symbol: The symbol of the global token of your choice. For example: <code>symbol=IBM</code>.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the quote data in JSON format; <code>csv</code> returns the quote data as a CSV (comma separated value) file.
func (a *Alphavantage) GetGlobalQuote(symbol, opt_datatype string) api.Response {
	function := "GLOBAL_QUOTE"
	params := map[string]string{
		"symbol":   symbol,
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// Search Endpoint
// Looking for some specific symbols or companies? Trying to build an auto-complete search box similar to the one below?
// <img style="width: 60%; height: auto;" src="/static/img/autocomplete.jpg"/>
// We&#39;ve got you covered! The Search Endpoint returns the best-matching symbols and market information based on keywords of your choice. The search results also contain match scores that provide you with the full flexibility to develop your own search and filtering logic.
// https://www.alphavantage.co/documentation/#symbolsearch
//
// Parameters:
// -	keywords: A text string of your choice. For example: <code>keywords=microsoft</code>.
// -	opt_datatype: By default, <code>datatype=json</code>. Strings <code>json</code> and <code>csv</code> are accepted with the following specifications: <code>json</code> returns the search results in JSON format; <code>csv</code> returns the search results as a CSV (comma separated value) file.
func (a *Alphavantage) GetSymbolSearch(keywords, opt_datatype string) api.Response {
	function := "SYMBOL_SEARCH"
	params := map[string]string{
		"keywords": keywords,
		"datatype": opt_datatype,
	}

	return a.client.Query(function, params)
}

// Global Market Open & Close Status
// This endpoint returns the current market status (open vs. closed) of major trading venues for equities, forex, and cryptocurrencies around the world.
// https://www.alphavantage.co/documentation/#market-status
//
// Parameters:
func (a *Alphavantage) GetMarketStatus(string) api.Response {
	function := "MARKET_STATUS"
	params := map[string]string{}

	return a.client.Query(function, params)
}

// Endpoint Category: Alpha Intelligence™
// https://www.alphavantage.co/documentation/#intelligence
//
// The APIs in this section contain advanced market intelligence built with our decades of expertise in AI, machine learning, and quantitative finance. We hope these highly differentiated alternative datasets can help turbocharge your trading strategy, market research, and financial software application to the next level.

// Market News & Sentiment
// Looking for market news signals to augment your trading strategy, or a global news feed API for your web/mobile app? You&#39;ve just found it. This API returns live and historical market news &amp; sentiment data derived from over 50 major financial news outlets around the world, covering stocks, cryptocurrencies, forex, and a wide range of topics such as fiscal policy, mergers &amp; acquisitions, IPOs, etc. This API, combined with our core stock API, fundamental data, and technical indicator APIs, can provide you with a 360-degree view of the financial market and the broader economy.
// https://www.alphavantage.co/documentation/#news-sentiment
//
// Parameters:
// -	opt_tickers: The stock/crypto/forex symbols of your choice. For example: <code>tickers=IBM</code> will filter for articles that mention the IBM ticker; <code>tickers=COIN,CRYPTO:BTC,FOREX:USD</code> will filter for articles that <u>simultaneously</u> mention Coinbase (COIN), Bitcoin (CRYPTO:BTC), and US Dollar (FOREX:USD) in their content.
// -	opt_topics: The news topics of your choice. For example: <code>topics=technology</code> will filter for articles that write about the technology sector; <code>topics=technology,ipo</code> will filter for articles that <u>simultaneously</u> cover technology <u>and</u> IPO in their content. Below is the full list of supported topics:
//
//	<li>Blockchain: <code>blockchain</code></li>
//	<li>Earnings: <code>earnings</code></li>
//	<li>IPO: <code>ipo</code></li>
//	<li>Mergers &amp; Acquisitions: <code>mergers_and_acquisitions</code></li>
//	<li>Financial Markets: <code>financial_markets</code></li>
//	<li>Economy - Fiscal Policy (e.g., tax reform, government spending): <code>economy_fiscal</code></li>
//	<li>Economy - Monetary Policy (e.g., interest rates, inflation): <code>economy_monetary</code></li>
//	<li>Economy - Macro/Overall: <code>economy_macro</code></li>
//	<li>Energy &amp; Transportation: <code>energy_transportation</code></li>
//	<li>Finance: <code>finance</code></li>
//	<li>Life Sciences: <code>life_sciences</code></li>
//	<li>Manufacturing: <code>manufacturing</code></li>
//	<li>Real Estate &amp; Construction: <code>real_estate</code></li>
//	<li>Retail &amp; Wholesale: <code>retail_wholesale</code></li>
//	<li>Technology: <code>technology</code></li>
//
// -	opt_time_from: The time range of the news articles you are targeting, in YYYYMMDDTHHMM format. For example: <code>time_from=20220410T0130</code>. If time_from is specified but time_to is missing, the API will return articles published between the time_from value and the current time.
// -	opt_sort: By default, <code>sort=LATEST</code> and the API will return the latest articles first. You can also set <code>sort=EARLIEST</code> or <code>sort=RELEVANCE</code> based on your use case.
// -	opt_limit: By default, <code>limit=50</code> and the API will return up to 50 matching results. You can also set <code>limit=200</code> to output up to 200 results. If you are looking for an even higher output limit, please contact <a href="/cdn-cgi/l/email-protection" class="__cf_email__">[email protected]</a> to have your limit boosted.
func (a *Alphavantage) GetNewsSentiment(opt_tickers, opt_topics, opt_time_from, opt_sort, opt_limit string) api.Response {
	function := "NEWS_SENTIMENT"
	params := map[string]string{
		"tickers":   opt_tickers,
		"topics":    opt_topics,
		"time_from": opt_time_from,
		"sort":      opt_sort,
		"limit":     opt_limit,
	}

	return a.client.Query(function, params)
}

// Endpoint Category: Fundamental Data
// https://www.alphavantage.co/documentation/#fundamentals
//
// We offer the following set of fundamental data APIs in various temporal dimensions covering key financial metrics, income statements, balance sheets, cash flow, and other fundamental data points.

// Company Overview
// This API returns the company information, financial ratios, and other key metrics for the equity specified. Data is generally refreshed on the same day a company reports its latest earnings and financials.
// https://www.alphavantage.co/documentation/#company-overview
//
// Parameters:
// -	symbol: The symbol of the token of your choice. For example: <code>symbol=IBM</code>.
func (a *Alphavantage) GetOverview(symbol string) api.Response {
	function := "OVERVIEW"
	params := map[string]string{
		"symbol": symbol,
	}

	return a.client.Query(function, params)
}

// INCOME_STATEMENT
// This API returns the annual and quarterly income statements for the company of interest, with normalized fields <a href="https://documentation.alphavantage.co/FundamentalDataDocs/index.html" target="_blank">mapped to GAAP and IFRS taxonomies</a> of the SEC. Data is generally refreshed on the same day a company reports its latest earnings and financials.
// https://www.alphavantage.co/documentation/#income-statement
//
// Parameters:
// -	symbol: The symbol of the token of your choice. For example: <code>symbol=IBM</code>.
func (a *Alphavantage) GetIncomeStatement(symbol string) api.Response {
	function := "INCOME_STATEMENT"
	params := map[string]string{
		"symbol": symbol,
	}

	return a.client.Query(function, params)
}

// BALANCE_SHEET
// This API returns the annual and quarterly balance sheets for the company of interest, with normalized fields <a href="https://documentation.alphavantage.co/FundamentalDataDocs/index.html" target="_blank">mapped to GAAP and IFRS taxonomies</a> of the SEC. Data is generally refreshed on the same day a company reports its latest earnings and financials.
// https://www.alphavantage.co/documentation/#balance-sheet
//
// Parameters:
// -	symbol: The symbol of the token of your choice. For example: <code>symbol=IBM</code>.
func (a *Alphavantage) GetBalanceSheet(symbol string) api.Response {
	function := "BALANCE_SHEET"
	params := map[string]string{
		"symbol": symbol,
	}

	return a.client.Query(function, params)
}

// CASH_FLOW
// This API returns the annual and quarterly cash flow for the company of interest, with normalized fields <a href="https://documentation.alphavantage.co/FundamentalDataDocs/index.html" target="_blank">mapped to GAAP and IFRS taxonomies</a> of the SEC. Data is generally refreshed on the same day a company reports its latest earnings and financials.
// https://www.alphavantage.co/documentation/#cash-flow
//
// Parameters:
// -	symbol: The symbol of the token of your choice. For example: <code>symbol=IBM</code>.
func (a *Alphavantage) GetCashFlow(symbol string) api.Response {
	function := "CASH_FLOW"
	params := map[string]string{
		"symbol": symbol,
	}

	return a.client.Query(function, params)
}

// Earnings
// This API returns the annual and quarterly earnings (EPS) for the company of interest. Quarterly data also includes analyst estimates and surprise metrics.
// https://www.alphavantage.co/documentation/#earnings
//
// Parameters:
// -	symbol: The symbol of the token of your choice. For example: <code>symbol=IBM</code>.
func (a *Alphavantage) GetEarnings(symbol string) api.Response {
	function := "EARNINGS"
	params := map[string]string{
		"symbol": symbol,
	}

	return a.client.Query(function, params)
}

// Listing & Delisting Status
// This API returns a list of active or delisted US stocks and ETFs, either as of the latest trading day or at a specific time in history. The endpoint is positioned to facilitate equity research on asset lifecycle and survivorship.
// https://www.alphavantage.co/documentation/#listing-status
//
// Parameters:
// -	opt_date: If no date is set, the API endpoint will return a list of active or delisted symbols as of the latest trading day. If a date is set, the API endpoint will &#34;travel back&#34; in time and return a list of active or delisted symbols on that particular date in history. Any <u>YYYY-MM-DD</u> date later than 2010-01-01 is supported. For example, <code>date=2013-08-03</code>
// -	opt_state: By default, <code>state=active</code> and the API will return a list of actively traded stocks and ETFs. Set <code>state=delisted</code> to query a list of delisted assets.
func (a *Alphavantage) GetListingStatus(opt_date, opt_state string) api.Response {
	function := "LISTING_STATUS"
	params := map[string]string{
		"date":  opt_date,
		"state": opt_state,
	}

	return a.client.Query(function, params)
}

// Earnings Calendar
// This API returns a list of company earnings expected in the next 3, 6, or 12 months.
// https://www.alphavantage.co/documentation/#earnings-calendar
//
// Parameters:
// -	opt_symbol: By default, no symbol will be set for this API. When no symbol is set, the API endpoint will return the full list of company earnings scheduled. If a symbol is set, the API endpoint will return the expected earnings for that specific symbol. For example, <code>symbol=IBM</code>
// -	opt_horizon: By default, <code>horizon=3month</code> and the API will return a list of expected company earnings in the next 3 months. You may set <code>horizon=6month</code> or <code>horizon=12month</code> to query the earnings scheduled for the next 6 months or 12 months, respectively.
func (a *Alphavantage) GetEarningsCalendar(opt_symbol, opt_horizon string) api.Response {
	function := "EARNINGS_CALENDAR"
	params := map[string]string{
		"symbol":  opt_symbol,
		"horizon": opt_horizon,
	}

	return a.client.Query(function, params)
}

// IPO Calendar
// This API returns a list of IPOs expected in the next 3 months.
// https://www.alphavantage.co/documentation/#ipo-calendar
//
// Parameters:
func (a *Alphavantage) GetIpoCalendar(string) api.Response {
	function := "IPO_CALENDAR"
	params := map[string]string{}

	return a.client.Query(function, params)
}

// Checksum: C9nQYlBo4vIrBxhXXTFbZct/xYtP+sCm209jYlnOhao=
